// ─────────────────────────────────────────────
//  Global configuration
// ─────────────────────────────────────────────
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * ─────────────────────────────────────────────
 * MASTER DATA  (lookup tables you can extend)
 * ─────────────────────────────────────────────
 */
model Role {
  id          Int          @id @default(autoincrement())
  code        String       @unique // e.g. ADMIN, AGENT, OWNER
  description String?
  users       UserOnRole[]
}

model PropertyActorRole {
  id          Int              @id @default(autoincrement())
  code        String           @unique
  description String?
  userLinks   UserOnProperty[]
}

model PropertyStatus {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  description String?
  properties  Property[]
}

model ListingType {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  description String?
  properties  Property[]
}

model PropertyType {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  description String?
  properties  Property[]
}

/**
 * ─────────────────────────────────────────────
 * USERS & AUTHORIZATION
 * ─────────────────────────────────────────────
 */
model User {
  id            Int              @id @default(autoincrement())
  email         String           @unique
  password      String
  fullName      String
  phone         String?
  createdAt     DateTime         @default(now())
  roles         UserOnRole[]
  propertyLinks UserOnProperty[]
  agentListings Property[]       @relation("AgentProperties")
}

model UserOnRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@unique([userId, roleId])
}

/**
 * ─────────────────────────────────────────────
 * LOCATION
 * ─────────────────────────────────────────────
 */
model Address {
  id         Int        @id @default(autoincrement())
  street     String
  number     String?
  city       String
  province   String
  postalCode String?
  extraInfo  String?
  properties Property[]
  buildings  Building[]
}

/**
 * ─────────────────────────────────────────────
 * REAL-ESTATE INVENTORY
 * ─────────────────────────────────────────────
 */
model Property {
  id             Int            @id @default(autoincrement())
  title          String
  description    String?
  listingType    ListingType    @relation(fields: [listingTypeId], references: [id])
  listingTypeId  Int
  status         PropertyStatus @relation(fields: [statusId], references: [id])
  statusId       Int
  propertyType   PropertyType   @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId Int

  price    Decimal @db.Decimal(14, 2)
  currency String  @default("ARS")

  // Location
  address   Address  @relation(fields: [addressId], references: [id])
  addressId Int
  lat       Decimal? @db.Decimal(9, 6)
  lng       Decimal? @db.Decimal(9, 6)

  // Generic physical data
  coveredAreaM2 Float?
  totalAreaM2   Float?
  bedrooms      Int?
  bathrooms     Int?
  floors        Int?
  yearBuilt     Int?
  garages       Int?

  // Business relations
  propertyActors UserOnProperty[]
  agent          User?            @relation("AgentProperties", fields: [agentId], references: [id])
  agentId        Int?

  // Relación con edificios
  building   Building? @relation(fields: [buildingId], references: [id])
  buildingId Int?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lat, lng])
}

model Building {
  id   Int    @id @default(autoincrement())
  name String

  // Dirección del edificio
  address   Address @relation(fields: [addressId], references: [id])
  addressId Int

  // Un edificio puede tener varias propiedades
  properties Property[]

  // Metadatos del edificio
  yearBuilt  Int?
  floors     Int?
  totalUnits Int?

  // Información de localización adicional
  lat Decimal? @db.Decimal(9, 6)
  lng Decimal? @db.Decimal(9, 6)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * ─────────────────────────────────────────────
 * USER ↔ PROPERTY ROLES  (owner, tenant, …)
 * ─────────────────────────────────────────────
 */
model UserOnProperty {
  id          Int               @id @default(autoincrement())
  user        User              @relation(fields: [userId], references: [id])
  userId      Int
  property    Property          @relation(fields: [propertyId], references: [id])
  propertyId  Int
  actorRole   PropertyActorRole @relation(fields: [actorRoleId], references: [id])
  actorRoleId Int

  @@unique([userId, propertyId, actorRoleId])
}
